1.参照代码：
         com/imooc/order/MqSenderTest.java
         com/imooc/order/message/MqReceiver.java
         com/imooc/order/message/ProductInfoReceiver.java

2.注意：在使用rabbitMQ和stream之前都要配置rabbitMQ访问，参照如下：
         spring.rabbitmq.port=5672
         spring.rabbitmq.username=guest
         spring.rabbitmq.password=guest
         spring.rabbitmq.virtual-host=/

3.异步扣库存逻辑   异步的实施还要根据具体业务场景，做好分析，到底适不适合？
        创建订单成功之后，向消息队列（订单消息队列）发送消息（通知商品服务，下单成功），那么监听这个消息队列的商品服务就收到消息了，执行扣除库存操作，如果扣库存成功了，
        那么就向消息队列（商品消息队列）发送消息（通知订单服务，扣库存成功），那么监听这个消息队列的订单服务，就会把订单状态改为下单成功，否则把订单状态改为失败。

4.Springboot+rabbitmq实现延时队列的两种方式
        https://blog.csdn.net/zhangyuxuan2/article/details/82986802

5.Springboot+rabbitmq实现持久化

6.rabbitmq的各种功能应用场景
     异步处理，延迟，持久化

7.redis的应用场景
     分布式锁，分布式缓存，分布式session，持久化，主从复制，sentinel高可用

8.mongodb应用场景
     比如前端展示用，没有事务处理，数据类型比较丰富的情况下

9.mysql应用场景
    需要强事务处理，持久化，复杂的关联查询等等
    